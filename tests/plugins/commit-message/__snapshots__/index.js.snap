// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`commit-message pull request edited Posts failure status if PR with multiple commits has invalid tag prefix in the title: " New: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if PR with multiple commits has invalid tag prefix in the title: ": " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if PR with multiple commits has invalid tag prefix in the title: "Foo: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if PR with multiple commits has invalid tag prefix in the title: "New " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if PR with multiple commits has invalid tag prefix in the title: "New : " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if PR with multiple commits has invalid tag prefix in the title: "New" 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if PR with multiple commits has invalid tag prefix in the title: "New:" 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if PR with multiple commits has invalid tag prefix in the title: "Neww: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if PR with multiple commits has invalid tag prefix in the title: "Revert: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if PR with multiple commits has invalid tag prefix in the title: "nNew: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if PR with multiple commits has invalid tag prefix in the title: "new: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if commit message is not correct 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if multiple commits and PR title references issue improperly: #1 (fixes #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if multiple commits and PR title references issue improperly: #1 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if multiple commits and PR title references issue improperly: (closes #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if multiple commits and PR title references issue improperly: (fix #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if multiple commits and PR title references issue improperly: (fixes #1, #2) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if multiple commits and PR title references issue improperly: (fixes eslint#1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if multiple commits and PR title references issue improperly: (ref #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if multiple commits and PR title references issue improperly: (refs eslint/nested/group#1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if multiple commits and PR title references issue improperly: fixes #1 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if the commit message has invalid tag prefix: " New: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if the commit message has invalid tag prefix: ": " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if the commit message has invalid tag prefix: "Foo: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if the commit message has invalid tag prefix: "New " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if the commit message has invalid tag prefix: "New : " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if the commit message has invalid tag prefix: "New" 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if the commit message has invalid tag prefix: "New:" 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if the commit message has invalid tag prefix: "Neww: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if the commit message has invalid tag prefix: "Revert: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if the commit message has invalid tag prefix: "nNew: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if the commit message has invalid tag prefix: "new: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if the commit message is longer than 72 chars 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The length of the commit message must be less than or equal to 72

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if the commit message references issue improperly: #1 (fixes #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if the commit message references issue improperly: #1 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if the commit message references issue improperly: (closes #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if the commit message references issue improperly: (fix #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if the commit message references issue improperly: (fixes #1, #2) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if the commit message references issue improperly: (fixes eslint#1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if the commit message references issue improperly: (ref #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if the commit message references issue improperly: (refs eslint/nested/group#1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if the commit message references issue improperly: fixes #1 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if there are multiple commit messages and the title is invalid 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request edited Posts failure status if there are multiple commit messages and the title is too long 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The length of the commit message must be less than or equal to 72

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if PR with multiple commits has invalid tag prefix in the title: " New: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if PR with multiple commits has invalid tag prefix in the title: ": " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if PR with multiple commits has invalid tag prefix in the title: "Foo: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if PR with multiple commits has invalid tag prefix in the title: "New " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if PR with multiple commits has invalid tag prefix in the title: "New : " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if PR with multiple commits has invalid tag prefix in the title: "New" 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if PR with multiple commits has invalid tag prefix in the title: "New:" 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if PR with multiple commits has invalid tag prefix in the title: "Neww: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if PR with multiple commits has invalid tag prefix in the title: "Revert: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if PR with multiple commits has invalid tag prefix in the title: "nNew: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if PR with multiple commits has invalid tag prefix in the title: "new: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if commit message is not correct 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if multiple commits and PR title references issue improperly: #1 (fixes #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if multiple commits and PR title references issue improperly: #1 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if multiple commits and PR title references issue improperly: (closes #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if multiple commits and PR title references issue improperly: (fix #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if multiple commits and PR title references issue improperly: (fixes #1, #2) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if multiple commits and PR title references issue improperly: (fixes eslint#1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if multiple commits and PR title references issue improperly: (ref #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if multiple commits and PR title references issue improperly: (refs eslint/nested/group#1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if multiple commits and PR title references issue improperly: fixes #1 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if the commit message has invalid tag prefix: " New: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if the commit message has invalid tag prefix: ": " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if the commit message has invalid tag prefix: "Foo: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if the commit message has invalid tag prefix: "New " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if the commit message has invalid tag prefix: "New : " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if the commit message has invalid tag prefix: "New" 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if the commit message has invalid tag prefix: "New:" 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if the commit message has invalid tag prefix: "Neww: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if the commit message has invalid tag prefix: "Revert: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if the commit message has invalid tag prefix: "nNew: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if the commit message has invalid tag prefix: "new: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if the commit message is longer than 72 chars 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The length of the commit message must be less than or equal to 72

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if the commit message references issue improperly: #1 (fixes #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if the commit message references issue improperly: #1 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if the commit message references issue improperly: (closes #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if the commit message references issue improperly: (fix #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if the commit message references issue improperly: (fixes #1, #2) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if the commit message references issue improperly: (fixes eslint#1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if the commit message references issue improperly: (ref #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if the commit message references issue improperly: (refs eslint/nested/group#1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if the commit message references issue improperly: fixes #1 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if there are multiple commit messages and the title is invalid 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request opened Posts failure status if there are multiple commit messages and the title is too long 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The length of the commit message must be less than or equal to 72

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if PR with multiple commits has invalid tag prefix in the title: " New: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if PR with multiple commits has invalid tag prefix in the title: ": " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if PR with multiple commits has invalid tag prefix in the title: "Foo: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if PR with multiple commits has invalid tag prefix in the title: "New " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if PR with multiple commits has invalid tag prefix in the title: "New : " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if PR with multiple commits has invalid tag prefix in the title: "New" 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if PR with multiple commits has invalid tag prefix in the title: "New:" 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if PR with multiple commits has invalid tag prefix in the title: "Neww: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if PR with multiple commits has invalid tag prefix in the title: "Revert: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if PR with multiple commits has invalid tag prefix in the title: "nNew: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if PR with multiple commits has invalid tag prefix in the title: "new: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if commit message is not correct 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if multiple commits and PR title references issue improperly: #1 (fixes #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if multiple commits and PR title references issue improperly: #1 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if multiple commits and PR title references issue improperly: (closes #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if multiple commits and PR title references issue improperly: (fix #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if multiple commits and PR title references issue improperly: (fixes #1, #2) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if multiple commits and PR title references issue improperly: (fixes eslint#1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if multiple commits and PR title references issue improperly: (ref #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if multiple commits and PR title references issue improperly: (refs eslint/nested/group#1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if multiple commits and PR title references issue improperly: fixes #1 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if the commit message has invalid tag prefix: " New: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if the commit message has invalid tag prefix: ": " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if the commit message has invalid tag prefix: "Foo: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if the commit message has invalid tag prefix: "New " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if the commit message has invalid tag prefix: "New : " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if the commit message has invalid tag prefix: "New" 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if the commit message has invalid tag prefix: "New:" 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if the commit message has invalid tag prefix: "Neww: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if the commit message has invalid tag prefix: "Revert: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if the commit message has invalid tag prefix: "nNew: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if the commit message has invalid tag prefix: "new: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if the commit message is longer than 72 chars 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The length of the commit message must be less than or equal to 72

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if the commit message references issue improperly: #1 (fixes #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if the commit message references issue improperly: #1 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if the commit message references issue improperly: (closes #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if the commit message references issue improperly: (fix #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if the commit message references issue improperly: (fixes #1, #2) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if the commit message references issue improperly: (fixes eslint#1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if the commit message references issue improperly: (ref #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if the commit message references issue improperly: (refs eslint/nested/group#1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if the commit message references issue improperly: fixes #1 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if there are multiple commit messages and the title is invalid 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request reopened Posts failure status if there are multiple commit messages and the title is too long 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The length of the commit message must be less than or equal to 72

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if PR with multiple commits has invalid tag prefix in the title: " New: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if PR with multiple commits has invalid tag prefix in the title: ": " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if PR with multiple commits has invalid tag prefix in the title: "Foo: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if PR with multiple commits has invalid tag prefix in the title: "New " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if PR with multiple commits has invalid tag prefix in the title: "New : " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if PR with multiple commits has invalid tag prefix in the title: "New" 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if PR with multiple commits has invalid tag prefix in the title: "New:" 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if PR with multiple commits has invalid tag prefix in the title: "Neww: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if PR with multiple commits has invalid tag prefix in the title: "Revert: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if PR with multiple commits has invalid tag prefix in the title: "nNew: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if PR with multiple commits has invalid tag prefix in the title: "new: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if commit message is not correct 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if multiple commits and PR title references issue improperly: #1 (fixes #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if multiple commits and PR title references issue improperly: #1 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if multiple commits and PR title references issue improperly: (closes #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if multiple commits and PR title references issue improperly: (fix #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if multiple commits and PR title references issue improperly: (fixes #1, #2) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if multiple commits and PR title references issue improperly: (fixes eslint#1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if multiple commits and PR title references issue improperly: (ref #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if multiple commits and PR title references issue improperly: (refs eslint/nested/group#1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if multiple commits and PR title references issue improperly: fixes #1 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if the commit message has invalid tag prefix: " New: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if the commit message has invalid tag prefix: ": " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if the commit message has invalid tag prefix: "Foo: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if the commit message has invalid tag prefix: "New " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if the commit message has invalid tag prefix: "New : " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if the commit message has invalid tag prefix: "New" 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if the commit message has invalid tag prefix: "New:" 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if the commit message has invalid tag prefix: "Neww: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if the commit message has invalid tag prefix: "Revert: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if the commit message has invalid tag prefix: "nNew: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if the commit message has invalid tag prefix: "new: " 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if the commit message is longer than 72 chars 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The length of the commit message must be less than or equal to 72

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if the commit message references issue improperly: #1 (fixes #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if the commit message references issue improperly: #1 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if the commit message references issue improperly: (closes #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if the commit message references issue improperly: (fix #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if the commit message references issue improperly: (fixes #1, #2) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if the commit message references issue improperly: (fixes eslint#1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if the commit message references issue improperly: (ref #1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if the commit message references issue improperly: (refs eslint/nested/group#1) 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if the commit message references issue improperly: fixes #1 1`] = `
"Hi @user-a!, thanks for the Pull Request

The first commit message isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The issue reference must be formatted as follows:

  If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use \`(refs #1234)\` instead of \`(fixes #1234)\`.

  Here are some good commit message summary examples:

  \`\`\`
  Build: Update Travis to only test Node 0.10 (refs #734)
  Fix: Semi rule incorrectly flagging extra semicolon (fixes #840)
  Upgrade: Esprima to 1.2, switch to using comment attachment (fixes #730)
  \`\`\`


Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if there are multiple commit messages and the title is invalid 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The commit message tag must be one of the following:

  The \`Tag\` is one of the following:

  - Fix - for a bug fix.
  - Update - either for a backwards-compatible enhancement or for a rule change that adds reported problems.
  - New - implements a new feature.
  - Breaking - for a backwards-incompatible enhancement or feature.
  - Docs - changes to documentation only.
  - Build - changes to build process only.
  - Upgrade - for a dependency upgrade.
  - Chore - for anything that isn't user-facing (for example, refactoring, adding tests, etc.).

  You can use the [labels of the issue you are working on](https://eslint.org/docs/developer-guide/contributing/working-on-issues#issue-labels) to determine the best tag.

- There should be a space following the initial tag and colon, for example 'New: Message'.
- The first letter of the tag should be in uppercase

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;

exports[`commit-message pull request synchronize Posts failure status if there are multiple commit messages and the title is too long 1`] = `
"Hi @user-a!, thanks for the Pull Request

The pull request title isn't properly formatted. We ask that you update the message to match this format, as we use it to generate changelogs and automate releases.

- The length of the commit message must be less than or equal to 72

Read more about contributing to ESLint [here](https://eslint.org/docs/developer-guide/contributing/)
"
`;
